{"name":"Wifish","tagline":"wifish are small scripts to get ride of wicd/NetworkManager","body":"# Wifish #\r\n\r\nWifish is small shell scripts to get ride of wicd/NetworkManager.\r\n\r\n## License ##\r\n\r\nWifish is released under the MIT Public License\r\n\r\n## Description ##\r\n\r\nWifish is two main things:\r\n\r\n- wifish-cfg: a command that handles connexion.\r\n in interactive mode, it proposes the available networks, \r\nuser select one, if the network has never been chosen, \r\nit interactively configures it (it creates a wpa_supplicant \r\nconfiguration file), and it establishes a connexion with this network.\r\n\r\n- wifishd: a daemon that scans regulary networks and connects \r\nto one if it's already configured.\r\n\r\nIt also installs `wifish` which is a simple wrapper around `sudo wifish-cfg` and a simple init script for wifishd.\r\n\r\n## Installation ##\r\n\r\n### Dependancies ###\r\n\r\nWifish relies on `dmenu`, `iwlist`, `wpa_supplicant`, \r\n`iwconfig`, a dhcp client (tested with `dhclient`) and `ifconfig`.\r\n\r\n### Make ###\r\n\r\nJust run as root:\r\n\r\n```\r\nmake install\r\n```\r\n\r\n## Configuration ##\r\n\r\nSome wifish parameters could be configured in ```/etc/wifish/wifish.conf``` (default location).\r\n\r\nIt's mainly stuff like path to pid files.\r\n\r\nThe configured networks are stored in ```/etc/wifish/networks/```.\r\n\r\n## wifishd ##\r\n\r\nwifishd is a daemon that connects automaticaly to already configured networks.\r\n\r\n### starting wifishd ###\r\n\r\nWifish provides a (too?) simple init script to start or stop wifishd:\r\n\r\n```bash\r\n#start wifisihd\r\n/etc/init.d/wifishd start\r\n#stop wifishd\r\n/etc/init.d/wifishd stop\r\n#restart wifishd\r\n/etc/init.d/wifishd restart\r\n#show if it's running or not\r\n/etc/init.d/wifishd status\r\n```\r\n\r\nMaking wifishd start at boot:\r\n\r\n```bash\r\n#on debian\r\nupdate-rc.d wifishd start\r\n```\r\n\r\n## wifish-cfg ##\r\n\r\nwifish-cfg is the tool that interactively configures networks and connect to networks.\r\n\r\n### using wifish-cfg ###\r\n\r\nAs root, just run:\r\n\r\n```\r\nwifish-cfg\r\n```\r\n\r\nand select what you need.\r\n\r\n### Sudo configuration ###\r\n\r\nIf you don't trust my script, it should be run as root.\r\n\r\nIf you trust my script (you shouldn't) you could \r\nadd something like that in your /etc/sudoers:\r\n\r\n```\r\nALL     ALL = NOPASSWD: /usr/sbin/wifish-cfg\r\n```\r\n\r\nNow, you can run wifish-cfg as a normal user \r\n\r\n```bash\r\nme@my-host $ sudo wifish-cfg\r\n#or using the provided sudo wrapper:\r\nme@my-host $ wifish\r\n```\r\n\r\n### Modifying a network ###\r\n\r\nwifish doesn't provide anything for that, you must edit your network file manually inside ```/etc/wifish/networks/```.\r\n\r\nIt's the same if you want to remove a configured network.\r\n\r\n## About templates ##\r\n\r\nThe template directory is ```/etc/wifish/templates/```.\r\n\r\nTemplate example:\r\n\r\n```\r\nctrl_interface=/var/run/wpa_supplicant\r\nnetwork={\r\n    ssid=\"$_ESSID\"\r\n    key_mgmt=WPA-EAP\r\n    eap=TTLS\r\n    identity=\"$_IDENTITY\"\r\n    anonymous_identity=\"anonymous\"\r\n    password=\"$_PASSWORD\"\r\n    phase2=\"auth=PAP\"\r\n}\r\n```\r\nYou could easily create new templates, wifish will automatically get the variables in your template. ```$_ESSID``` must be present and the variables must be marked by `$_<VARIABLE_NAME>`.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}