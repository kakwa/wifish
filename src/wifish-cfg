#!/bin/sh
interface="wlan0"

#default configuration file
DEFAULT_CONFIG_FILE="/etc/wifish/wifish.conf"

test_file(){
    local file=$1
    if ! [ -a $file ]
    then
        echo "[ERROR] $file doesn't exist"
        exit 1
    fi
}

choose_and_configure(){
    #we need some template to create the .cfg
    if ! [ -d /etc/wpa_supplicant/templates ]
    then 
	    echo "missing /etc/wpa_supplicant/templates/"
	    echo "(template directory)"
	    exit 1 
    fi

    #just to be sure
    mkdir -p /etc/wpa_supplicant/networks/


    #create the menu listing the APs, return the chosen essid (ugly line I know)
    result=`iwlist $interface  scan |grep "ESSID\|WPA\|WEP\|Signal"|\
	    sed "s/^\ .*/&aaaa/"|sed "s/Quality.*/\n&/"|sed "s/^\ *&//"\
	    |sed "s/\ *//"| sed ':a;N;$!ba;s/aaaa\n/ /g'|sed s/aaaa//|\
	    sed "s/  Signal level=.*dBm//" |dmenu -l 5|sed s/.*:\"//|\
	    sed "s/\".*//"`

    #if no network is selected
    if [ "$result" = "" ]
    then 
	    echo "no network selected"
	    exit 0
    fi

    #if the essid is not configure, ask for configuration.
    if ! [ -f /etc/wpa_supplicant/networks/$result.cfg ]
    then
	    #choose the template from the templates directory
	    type=`ls /etc/wpa_supplicant/templates|dmenu -l 5`

	    #copy the template
	    cp /etc/wpa_supplicant/templates/$type\
		    /etc/wpa_supplicant/networks/$result.cfg

	    #set restrited access (clear passwd)
	    chown root:root /etc/wpa_supplicant/networks/$result.cfg
	    chmod 600 /etc/wpa_supplicant/networks/$result.cfg

 	    #configure the ESSID in the template copy
	    sed -i  "s/\$_ESSID/$result/g" /etc/wpa_supplicant/networks/$result.cfg

	    #get the other parameters name
	    arglist=`grep "\\$_" /etc/wpa_supplicant/templates/$type|grep -v ESSID |\
	    sed "s/^.*=//"|sed "s/\"//g"` 	 				

	    for i in $arglist;
	    do
		    #configure parameter in the template copy
		    data=`echo ""|dmenu -p "$i:"` #ask parameter
		    sed -i "s/$i/$data/g" /etc/wpa_supplicant/networks/$result.cfg		
	    done
    fi
}
reinit(){
#reinitialization of the wlan interface

    if [ -f /var/run/wpa_supplicant/$interface.pid ]
    then
	    kill `cat /var/run/wpa_supplicant/$interface.pid`
	    touch /var/run/wpa_supplicant/$interface
	    rm /var/run/wpa_supplicant/$interface 
    fi

    ifconfig $interface down
    ifconfig $interface up
    iwconfig $interface power off

    if [ -f /var/run/dhcpcd-$interface.pid ]
    then
	    pid=`cat /var/run/dhcpcd-$interface.pid` 
	    #kill dhcpcd on $interface
	    kill  $pid 
    fi
}

start_wifi(){

    test_file $USER_NETWORK_DIR/$NETWORK.cfg

    #start wpa supplicant
    wpa_supplicant -B -Dwext -i$IWLAN \
	    -c$USER_NETWORK_DIR/$NETWORK.cfg \
	    -P $PID_DIRECTORY/$IWLAN.pid

    #wait some seconds, to be sure wpa_supplicant has made its job
    sleep 2

    #start dhcpcd on the new connection
    $DHCP_CMD $interface 
}

while getopts ":hf:n:" opt; do
  case $opt in

    h) 
        help
        ;;
    f)
        CONFIG_FILE=`readlink -m $OPTARG`
        ;;
    n)
        #genautoo configuration file
        NETWORK=`readlink -m $OPTARG`
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        help
        exit 1
        ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
        help
        exit 1
        ;;
  esac
done

if [ -z "$CONFIG_FILE" ]
then CONFIG_FILE="$DEFAULT_CONFIG_FILE"
fi

test_file $CONFIG_FILE

. $CONFIG_FILE

if [ "$NETWORK" = "" ]
then
	reinit
	choose_and_configure
	start_wifi
else
	reinit
	start_wifi
fi
