#!/bin/sh
interface="wlan0"

#default configuration file
DEFAULT_CONFIG_FILE="/etc/wifish/wifish.conf"

help(){
    echo
    echo "`basename $0` configures a wifi network or connects your computer to it"
    echo
    echo "usage: `basename $0` [-h] [-f <path/to/configuration/file>] [-n <network's name>]"
    echo
    echo "without option it prompts you forms to configure a network"
    echo "-h: displays this help"
    echo "-f: permits to specifies another configuration file"
    echo "-n: permits the connexion to an already configured network"
    echo
}

test_file(){
    local file=$1
    if ! [ -e $file ]
    then
        echo "[ERROR] $file doesn't exist"
        exit 1
    fi
}

choose_and_configure(){
    #we need some template to create the .cfg
    if ! [ -d $TEMPLATES_DIR ]
    then 
	    echo "missing /etc/wpa_supplicant/templates/"
	    echo "(template directory)"
	    exit 1 
    fi

    #just to be sure
    mkdir -p $USER_NETWORK_DIR


    #create the menu listing the APs, return the chosen essid (ugly line I know)
    NETWORK=`iwlist $IWLAN  scan |grep "ESSID\|WPA\|WEP\|Signal"|\
	    sed "s/^\ .*/&aaaa/"|sed "s/Quality.*/\n&/"|sed "s/^\ *&//"\
	    |sed "s/\ *//"| sed ':a;N;$!ba;s/aaaa\n/ /g'|sed s/aaaa//|\
	    sed "s/  Signal level=.*dBm//" |dmenu -l 5|sed s/.*:\"//|\
	    sed "s/\".*//"`

    #if no network is selected
    if [ "$NETWORK" = "" ]
    then 
	    echo "no network selected"
	    exit 0
    fi

    #if the essid is not configure, ask for configuration.
    if ! [ -f /etc/wpa_supplicant/networks/$NETWORK.cfg ]
    then
	    #choose the template from the templates directory
	    type=`ls $TEMPLATES_DIR|dmenu -l 5`

	    #copy the template
	    cp $TEMPLATES_DIR/$type $USER_NETWORK_DIR/$NETWORK.cfg

	    #set restrited access (clear passwd)
	    chown root:root $USER_NETWORK_DIR/$NETWORK.cfg
	    chmod 600 $USER_NETWORK_DIR/$NETWORK.cfg

 	    #configure the ESSID in the template copy
	    sed -i  "s/\$_ESSID/$NETWORK/g" $USER_NETWORK_DIR/$NETWORK.cfg

	    #get the other parameters name
	    arglist=`grep "\\$_" $TEMPLATES_DIR/$type|grep -v ESSID |\
	    sed "s/^.*=//"|sed "s/\"//g"` 	 				

	    for i in $arglist;
	    do
		    #configure parameter in the template copy
		    data=`echo ""|dmenu -p "$i:"` #ask parameter
		    sed -i "s/$i/$data/g" /etc/wpa_supplicant/networks/$result.cfg		
	    done
    fi
}
reinit(){
#reinitialization of the wlan interface

    if [ -f $WPA_SUPPLICANT_PID_FILE ]
    then
	    kill `cat $WPA_SUPPLICANT_PID_FILE`
	    rm $WPA_SUPPLICANT_PID_FILE
    fi

    ifconfig $interface down
    ifconfig $interface up
    #iwconfig $interface power off

    if [ -f $DHCP_PID_FILE ]
    then
	    pid=`cat $DHCP_PID_FILE` 
	    #kill dhcpcd on $interface
	    kill  $pid 
        rm $DHCP_PID_FILE
    fi
}

start_wifi(){

    test_file $USER_NETWORK_DIR/$NETWORK.cfg

    #start wpa supplicant
    wpa_supplicant -B -Dwext -i$IWLAN \
	    -c$USER_NETWORK_DIR/$NETWORK.cfg \
	    -P $WPA_SUPPLICANT_PID_FILE

    #wait some seconds, to be sure wpa_supplicant has made its job
    sleep 2

    #start dhcpcd on the new connection
    $DHCP_CMD $interface 
}

while getopts ":hf:n:" opt; do
  case $opt in

    h) 
        help
        exit 0
        ;;
    f)
        CONFIG_FILE=`readlink -m $OPTARG`
        ;;
    n)
        #genautoo configuration file
        NETWORK=`readlink -m $OPTARG`
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        help
        exit 1
        ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
        help
        exit 1
        ;;
  esac
done

if [ `id -u` -ne 0 ]
then
    echo "[ERROR] must be run as root"
    exit 1
fi

if [ -z "$CONFIG_FILE" ]
then CONFIG_FILE="$DEFAULT_CONFIG_FILE"
fi

test_file $CONFIG_FILE

. $CONFIG_FILE

if [ "$NETWORK" = "" ]
then
	reinit
	choose_and_configure
	start_wifi
else
	reinit
	start_wifi
fi
